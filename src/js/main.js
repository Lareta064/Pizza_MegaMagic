document.addEventListener("DOMContentLoaded", function () {
    let bodyEl = document.body;
    /*PROMO SLIDER */
    let mainSlider = new Swiper('.main-slider', {
      slidesPerView: 1,
      speed: 800,
      spaceBetween:20,
      // autoplay: {
      //   delay: 3500,
      //   disableOnInteraction: false,
      // },
      pagination: {
        el: ".main-slider-pagination",
        clickable: true,
      },
    });
    
    /*COUNTER */
    const counters = document.querySelectorAll('.counter');
    // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –∫–∞–∂–¥—ã–π –±–ª–æ–∫ —Å—á–µ—Ç—á–∏–∫–∞
    counters.forEach((counter) => {
      const minusButton = counter.querySelector('.counter-minus'); // –ö–Ω–æ–ø–∫–∞ —É–º–µ–Ω—å—à–µ–Ω–∏—è
      const plusButton = counter.querySelector('.counter-plus'); // –ö–Ω–æ–ø–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è
      const counterValue = counter.querySelector('.counter-value'); // –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (span)

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ (–∏–∑ —Ç–µ–∫—Å—Ç–∞ span)
      let currentValue = parseInt(counterValue.textContent, 10) || 0;

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —É–º–µ–Ω—å—à–µ–Ω–∏—è
      const updateMinusButtonState = () => {
        if (currentValue <= 0) {
          minusButton.setAttribute('disabled', 'disabled');
        } else {
          minusButton.removeAttribute('disabled');
        }
      };

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
      updateMinusButtonState();

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É —É–º–µ–Ω—å—à–µ–Ω–∏—è
      minusButton.addEventListener('click', () => {
        if (currentValue > 0) {
          currentValue -= 1; // –£–º–µ–Ω—å—à–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
          counterValue.textContent = currentValue; // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ span
          updateMinusButtonState(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
        }
      });

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É —É–≤–µ–ª–∏—á–µ–Ω–∏—è
      plusButton.addEventListener('click', () => {
        currentValue += 1; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
        counterValue.textContent = currentValue; // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ span
        updateMinusButtonState(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
      });
    });

    /* profile-menu*/
    const profileMenuOpen = document.querySelector('#open-profile-menu');
    const profileMenu = document.querySelector('#profile-menu');
    if(profileMenuOpen){
      const profileMenuClose = profileMenu.querySelector('#close-profile-menu');
      profileMenuOpen.addEventListener('click',()=>{
        profileMenu.classList.add('active');
      });
      profileMenuClose.addEventListener('click',()=>{
        profileMenu.classList.remove('active');
      });
    }
    /*CUSTOM SELECT */
    document.querySelectorAll('.dropdown').forEach(function (dropDownWrapper) {
      const dropDownBtn = dropDownWrapper.querySelector('.dropdown__button');
      const dropDownList = dropDownWrapper.querySelector('.dropdown__list');
      const dropDownListItems = dropDownList.querySelectorAll('.dropdown__list-item');
      const dropDownInput = dropDownWrapper.querySelector('.dropdown__input-hidden');
      const dropDownSelected = dropDownList.querySelector('.selected');

      // –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ. –û—Ç–∫—Ä—ã—Ç—å/–ó–∞–∫—Ä—ã—Ç—å select
      dropDownBtn.addEventListener('click', function (e) {
        dropDownList.classList.toggle('dropdown__list--visible');
        this.classList.toggle('dropdown__button--active');
      });
        

      // –í—ã–±–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–ø–∏—Å–∫–∞. –ó–∞–ø–æ–º–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ó–∞–∫—Ä—ã—Ç—å –¥—Ä–æ–ø–¥–∞—É–Ω
      dropDownListItems.forEach(function (listItem) {
        listItem.addEventListener('click', function (e) {
        e.stopPropagation();
        dropDownListItems.forEach(function (item){item.classList.remove('selected')});
        
        dropDownBtn.innerText = this.dataset.value;
        dropDownBtn.focus();
        if(dropDownInput){dropDownInput.value = this.dataset.value;}
        this.classList.add('selected')
        dropDownList.classList.remove('dropdown__list--visible');
        dropDownBtn.classList.remove('dropdown__button--active');
        
        });
      });

      // –ö–ª–∏–∫ —Å–Ω–∞—Ä—É–∂–∏ –¥—Ä–æ–ø–¥–∞—É–Ω–∞. –ó–∞–∫—Ä—ã—Ç—å –¥—Ä–æ–ø–¥–∞—É–Ω
      document.addEventListener('click', function (e) {
        if (e.target !== dropDownBtn) {
        dropDownBtn.classList.remove('dropdown__button--active');
        dropDownList.classList.remove('dropdown__list--visible');
        }
      });

      // –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ Tab –∏–ª–∏ Escape. –ó–∞–∫—Ä—ã—Ç—å –¥—Ä–æ–ø–¥–∞—É–Ω
      document.addEventListener('keydown', function (e) {
        if (e.key === 'Tab' || e.key === 'Escape') {
        dropDownBtn.classList.remove('dropdown__button--active');
        dropDownList.classList.remove('dropdown__list--visible');
        }
      });
    });
});
document.addEventListener("DOMContentLoaded", function () {
  const scrollWrapper = document.querySelector(".scroll-wrapper");
  const catWrapper = document.querySelector(".cat-wrapper");

  function smoothScrollTo(element, target, duration = 500) {
      if ("scrollBehavior" in document.documentElement.style) {
          element.scrollTo({ left: target, behavior: "smooth" });
      } else {
          const start = element.scrollLeft;
          const startTime = performance.now();

          function scrollStep(timestamp) {
              const elapsed = timestamp - startTime;
              const progress = Math.min(elapsed / duration, 1);
              element.scrollLeft = start + (target - start) * progress;

              if (progress < 1) {
                  requestAnimationFrame(scrollStep);
              }
          }

          requestAnimationFrame(scrollStep);
      }
  }

  document.querySelectorAll(".cat-card").forEach((card) => {
      card.addEventListener("click", function () {
          // üîπ –£–¥–∞–ª—è–µ–º `active` —É –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
          document.querySelectorAll(".cat-card").forEach(c => c.classList.remove("active"));
          // üîπ –î–æ–±–∞–≤–ª—è–µ–º `active` –∫ —Ç–µ–∫—É—â–µ–π
          this.classList.add("active");

          // üîπ –õ–æ–≥–∏–∫–∞ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
          const scrollWrapperWidth = scrollWrapper.offsetWidth;
          const catWrapperWidth = catWrapper.scrollWidth;
          const cardRect = this.getBoundingClientRect();
          const wrapperRect = scrollWrapper.getBoundingClientRect();

          const cardCenter = cardRect.left + cardRect.width / 2;
          const wrapperCenter = wrapperRect.left + scrollWrapperWidth / 2;

          let scrollOffset = scrollWrapper.scrollLeft + (cardCenter - wrapperCenter);
          scrollOffset = Math.max(0, Math.min(scrollOffset, catWrapperWidth - scrollWrapperWidth));

          smoothScrollTo(scrollWrapper, scrollOffset, 500);
      });
  });
});
